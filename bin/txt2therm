#!/usr/bin/env ruby
VERSION = "dev"

# Require the necessary files.
require "optparse"
project_folder = File.dirname(File.dirname(File.realpath($0)))
require_relative "#{project_folder}/lib/thermal_printer.rb"

# Setup and parse the options.
opts = {}
OptionParser.new do |options|
  options.banner = "usage: txt2therm [OPTIONS] [FILE]"
  options.separator "\nSend text to the thermal printer."
  options.separator "\nOptions:"

  options.on("-t", "--tall", "Double height of text. (32 characters wide)") do |v|
    if opts["text_size"]
      opts["text_size"] = ThermalPrinter::DOUBLE_WIDTH_AND_HEIGHT
    else
      opts["text_size"] = ThermalPrinter::DOUBLE_HEIGHT
    end
  end

  options.on("-w", "--wide", "Double width of text. (16 characters wide)") do |v|
    if opts["text_size"]
      opts["text_size"] = ThermalPrinter::DOUBLE_WIDTH_AND_HEIGHT
    else
      opts["text_size"] = ThermalPrinter::DOUBLE_WIDTH
    end
  end

  options.on("-d", "--double", "Double width and height of text. (16 characters wide)") do |v|
    opts["text_size"] = ThermalPrinter::DOUBLE_WIDTH_AND_HEIGHT
  end

  options.on("-v", "--version", "Print version information and exit.") do
    puts "txt2therm #{VERSION}"
    exit
  end
end.parse!

# Read text from file or capture standard input (which could be piped).
text = if ARGV[0] and File.exist?(ARGV[0])
  File.read(ARGV[0])
else
  trap("INT", "EXIT")
  STDIN.read
end

# Add sizing escapes to the text, if necessary.
if opts["text_size"]
  text = ThermalPrinter.format_text(input, opts["text_size"])
end

# Send the text to the printer.
ThermalPrinter.write(text)
